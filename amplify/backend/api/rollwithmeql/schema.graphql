type TextRoom
  @model
  @key(name: "textRoomByName", fields: ["name"], queryField: "textRoomByName")
  @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  rolls: [AWSJSON!]
  counters: [AWSJSON!]
  safetyModule: SafetyModule! @connection
}

type InteractiveRoom
  @model
  @key(
    name: "interactiveRoomByName"
    fields: ["name"]
    queryField: "interactiveRoomByName"
  )
  @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  safetyModule: SafetyModule! @connection
  dice: [VisualDie] @connection(keyName: "byRoom", fields: ["id"])
  counters: [Counter] @connection(keyName: "byRoom", fields: ["id"])
}

type TrophyDarkRoom
  @model
  @key(
    name: "trophyDarkRoomByName"
    fields: ["name"]
    queryField: "trophyDarkRoomByName"
  )
  @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
}

type Subscription {
  onUpdateTextRoomByName(name: String!): TextRoom
    @aws_subscribe(mutations: ["updateTextRoom"])
  onUpdateInteractiveRoomByName(name: String!): InteractiveRoom
    @aws_subscribe(mutations: ["updateInteractiveRoom"])
  onUpdateTrophyDarkRoomByName(name: String!): TrophyDarkRoom
    @aws_subscribe(mutations: ["updateTrophyDarkRoom"])
}

type SavedRoll @model @auth(rules: [{ allow: owner, provider: userPools }]) {
  id: ID!
  rollName: String!
  dice: [AWSJSON!]!
  modifier: Int!
}

type SafetyModule @model @auth(rules: [{ allow: public }]) {
  id: ID!
  xCardActive: Boolean!
  linesAndVeils: [AWSJSON!]!
}

type Counter
  @model
  @key(name: "byRoom", fields: ["roomId"])
  @auth(rules: [{ allow: public }]) {
  id: ID!
  roomId: ID!
  title: String!
  value: Int!
  max: Int
  type: CounterType!
}

enum CounterType {
  CLOCK
  OTHER
}

type VisualDie
  @model
  @key(name: "byRoom", fields: ["roomId"])
  @auth(rules: [{ allow: public }]) {
  id: ID!
  roomId: ID!
  room: InteractiveRoom @connection(fields: ["roomId"])
  x: Int!
  y: Int!
  createdBy: String!
  result: Int!
  sides: Int!
  color: String!
}
