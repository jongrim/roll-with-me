type TextRoom
  @model
  @key(name: "textRoomByName", fields: ["name"], queryField: "textRoomByName")
  @auth(rules: [{ allow: public }, { allow: private }]) {
  id: ID!
  name: String!
  rolls: [AWSJSON!]
  counters: [AWSJSON!]
  safetyModule: SafetyModule! @connection
}

type InteractiveRoom
  @model
  @key(
    name: "interactiveRoomByName"
    fields: ["name"]
    queryField: "interactiveRoomByName"
  )
  @auth(rules: [{ allow: public }, { allow: private }]) {
  id: ID!
  name: String!
  safetyModule: SafetyModule! @connection
  dice: [VisualDie] @connection(keyName: "byRoom", fields: ["id"])
  counters: [Counter] @connection(keyName: "byRoom", fields: ["id"])
  labels: [Label] @connection(keyName: "byRoom", fields: ["id"])
  backgroundImageUrl: String
}

type TrophyDarkRoom
  @model
  @key(
    name: "trophyDarkRoomByName"
    fields: ["name"]
    queryField: "trophyDarkRoomByName"
  )
  @auth(rules: [{ allow: public }, { allow: private }]) {
  id: ID!
  name: String!
}

type UserRoom
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(rules: [{ allow: owner, provider: userPools }]) {
  id: ID!
  textRoom: TextRoom @connection
  interactiveRoom: InteractiveRoom @connection
  trophyDarkRoom: TrophyDarkRoom @connection
  roomKey: String!
  description: String
  createdOn: AWSDateTime!
  updatedOn: AWSDateTime!
  defaultRoomUsername: String
}

type SavedRoll @model @auth(rules: [{ allow: owner, provider: userPools }]) {
  id: ID!
  rollName: String!
  dice: [AWSJSON!]!
  modifier: Int!
}

type SafetyItem @model @auth(rules: [{ allow: owner, provider: userPools }]) {
  id: ID!
  label: String!
  classification: SafetyClassification!
  note: String
}

enum SafetyClassification {
  line
  veil
  ask
  consent
}

type SafetyModule @model @auth(rules: [{ allow: public }, { allow: private }]) {
  id: ID!
  xCardActive: Boolean!
  linesAndVeils: [AWSJSON!]!
}

type Label
  @model
  @key(name: "byRoom", fields: ["roomId"])
  @auth(rules: [{ allow: public }, { allow: private }]) {
  id: ID!
  roomId: ID!
  contents: String!
  x: Float!
  y: Float!
}

type Counter
  @model
  @key(name: "byRoom", fields: ["roomId"])
  @auth(rules: [{ allow: public }, { allow: private }]) {
  id: ID!
  roomId: ID!
  title: String!
  value: Int!
  max: Int
  x: Float!
  y: Float!
  type: CounterType!
}

enum CounterType {
  CLOCK
  OTHER
}

type VisualDie
  @model
  @key(name: "byRoom", fields: ["roomId"])
  @auth(rules: [{ allow: public }, { allow: private }]) {
  id: ID!
  roomId: ID!
  room: InteractiveRoom @connection(fields: ["roomId"])
  x: Float!
  y: Float!
  createdBy: String!
  result: Int!
  sides: Int!
  color: String!
  version: Int!
  type: String
}

type Subscription {
  onUpdateTextRoomByName(name: String!): TextRoom
    @aws_subscribe(mutations: ["updateTextRoom"])
  onUpdateInteractiveRoomByName(name: String!): InteractiveRoom
    @aws_subscribe(mutations: ["updateInteractiveRoom"])
  onUpdateTrophyDarkRoomByName(name: String!): TrophyDarkRoom
    @aws_subscribe(mutations: ["updateTrophyDarkRoom"])
  onCreateVisualDieByRoom(roomId: String!): VisualDie
    @aws_subscribe(mutations: ["createVisualDie"])
  onUpdateVisualDieById(id: String!): VisualDie
    @aws_subscribe(mutations: ["updateVisualDie"])
  onCreateCounterByRoom(roomId: String!): Counter
    @aws_subscribe(mutations: ["createCounter"])
  onUpdateCounterById(id: String!): Counter
    @aws_subscribe(mutations: ["updateCounter"])
  onCreateLabelByRoom(roomId: String!): Label
    @aws_subscribe(mutations: ["createLabel"])
  onUpdateLabelById(id: String!): Label
    @aws_subscribe(mutations: ["updateLabel"])
}
