type TextRoom
  @model
  @key(name: "textRoomByName", fields: ["name"], queryField: "textRoomByName")
  @auth(rules: [{ allow: public }, { allow: private }]) {
  id: ID!
  name: String!
  rolls: [AWSJSON!]
  customDice: [AWSJSON!]
  counters: [AWSJSON!]
  safetyModule: SafetyModule! @connection
}

type InteractiveRoom
  @model
  @key(
    name: "interactiveRoomByName"
    fields: ["name"]
    queryField: "interactiveRoomByName"
  )
  @auth(rules: [{ allow: public }, { allow: private }]) {
  id: ID!
  name: String!
  safetyModule: SafetyModule! @connection
  dice: [VisualDie] @connection(keyName: "byRoom", fields: ["id"])
  counters: [Counter] @connection(keyName: "byRoom", fields: ["id"])
  labels: [Label] @connection(keyName: "byRoom", fields: ["id"])
  backgroundImageUrl: String
  rolls: [AWSJSON!]
}

type TrophyDarkRoom
  @model
  @key(
    name: "trophyDarkRoomByName"
    fields: ["name"]
    queryField: "trophyDarkRoomByName"
  )
  @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  safetyModule: SafetyModule! @connection
  lightDice: [AWSJSON!]!
  darkDice: [AWSJSON!]!
  characters: [TrophyDarkCharacter]
    @connection(keyName: "byGame", fields: ["id"])
}

type TrophyDarkCharacter
  @model
  @auth(rules: [{ allow: public }])
  @key(name: "byGame", fields: ["gameID"]) {
  id: ID!
  gameID: ID!
  playerName: String!
  characterName: String!
  characterPronouns: String!
  characterImageUrl: AWSURL
  ruin: Int!
  occupation: String!
  background: String!
  drive: String!
  rituals: [String!]!
}

type TrophyGoldRoom
  @model
  @key(
    name: "trophyGoldRoomByName"
    fields: ["name"]
    queryField: "trophyGoldRoomByName"
  )
  @auth(rules: [{ allow: public }, { allow: private }]) {
  id: ID!
  name: String!
  safetyModule: SafetyModule! @connection
  hexMapModule: HexMapModule @connection
  diceModule: TrophyGoldDiceModule! @connection
  bestiary: [TrophyGoldBeast] @connection(keyName: "byGame", fields: ["id"])
  characters: [TrophyGoldCharacter]
    @connection(keyName: "byGame", fields: ["id"])
}

type TrophyGoldGMModule
  @model
  @auth(rules: [{ allow: owner, provider: userPools }])
  @key(name: "byGameID", fields: ["gameID"], queryField: "goldGMByGameID") {
  id: ID!
  gameID: ID!
  notes: AWSJSON
  bestiary: [TrophyGoldBeast] @connection(keyName: "byGMModule", fields: ["id"])
}

enum TrophyGoldDiceMode {
  risk
  hunt
  combat
  contest
  gold
}

type TrophyGoldDiceModule @model @auth(rules: [{ allow: public }]) {
  id: ID!
  lightDice: [AWSJSON!]!
  darkDice: [AWSJSON!]!
  goldDice: [AWSJSON!]!
  diceMode: TrophyGoldDiceMode!
}

type TrophyGoldCharacter
  @model
  @auth(rules: [{ allow: public }, { allow: private }])
  @key(name: "byGame", fields: ["gameID"]) {
  id: ID!
  gameID: ID!
  playerName: String!
  characterName: String
  characterPronouns: String
  characterImageUrl: AWSURL
  ruin: Int!
  weakPoint: Int
  lightDice: [AWSJSON!]
  darkDice: [AWSJSON!]
  occupation: String
  background: String
  drive: String
  rituals: [String!]
  skills: String
  armorSet: AWSJSON!
  weaponSet: AWSJSON!
  foundEquipment: [AWSJSON!]
  burdens: Int!
  hoard: Int!
  gold: Int!
  tokens: Int!
  hearthfire: AWSJSON
  backpack: AWSJSON!
  conditions: String!
  notes: String!
  hidden: Boolean
}

type TrophyGoldBeast
  @model
  @auth(rules: [{ allow: public }, { allow: private }])
  @key(name: "byGMModule", fields: ["gmModuleID"])
  @key(name: "byGame", fields: ["gameID"]) {
  id: ID!
  gameID: ID
  gmModuleID: ID
  endurance: String
  title: String
  description: String
  habit1: String
  habit2: String
  habit3: String
  habit4: String
  habit5: String
  habit6: String
  defenses: String
  weakness: String
}

type HeartRoom
  @model
  @key(name: "heartRoomByName", fields: ["name"], queryField: "heartRoomByName")
  @auth(rules: [{ allow: public }, { allow: private }]) {
  id: ID!
  name: String!
  d4Dice: [AWSJSON!]!
  d6Dice: [AWSJSON!]!
  d8Dice: [AWSJSON!]!
  d10Dice: [AWSJSON!]!
  d12Dice: [AWSJSON!]!
  d20Dice: [AWSJSON!]
  safetyModule: SafetyModule! @connection
  hexMapModule: HexMapModule! @connection
  characters: [HeartCharacter] @connection(keyName: "byGame", fields: ["id"])
  facilitatorNotes: String
}

type HeartCharacter
  @model
  @auth(rules: [{ allow: public }, { allow: private }])
  @key(name: "byGame", fields: ["gameID"]) {
  id: ID!
  gameID: ID!
  playerName: String!
  characterName: String!
  characterPronouns: String!
  characterImageUrl: AWSURL
  ancestry: String!
  calling: String!
  class: String!
  beats: [AWSJSON!]!
  fallout: [AWSJSON!]!
  bloodProtection: Int!
  bloodStress: Int!
  echoProtection: Int!
  echoStress: Int!
  fortuneProtection: Int!
  fortuneStress: Int!
  mindProtection: Int!
  mindStress: Int!
  supplyProtection: Int!
  supplyStress: Int!
  skills: AWSJSON!
  domains: AWSJSON!
  abilities: [AWSJSON!]!
  equipment: [AWSJSON!]!
  resources: [AWSJSON!]!
  bonds: [AWSJSON!]!
  notes: String!
}

type UserRoom
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(rules: [{ allow: owner, provider: userPools }]) {
  id: ID!
  textRoom: TextRoom @connection
  interactiveRoom: InteractiveRoom @connection
  trophyDarkRoom: TrophyDarkRoom @connection
  roomKey: String!
  description: String
  createdOn: AWSDateTime!
  updatedOn: AWSDateTime!
  defaultRoomUsername: String
}

type SavedRoll @model @auth(rules: [{ allow: owner, provider: userPools }]) {
  id: ID!
  rollName: String!
  dice: [AWSJSON!]!
  modifier: Int!
}

type SafetyItem @model @auth(rules: [{ allow: owner, provider: userPools }]) {
  id: ID!
  label: String!
  classification: SafetyClassification!
  note: String
}

enum SafetyClassification {
  line
  veil
  ask
  consent
}

type SafetyModule @model @auth(rules: [{ allow: public }, { allow: private }]) {
  id: ID!
  xCardActive: Boolean!
  linesAndVeils: [AWSJSON!]!
}

type HexMapModule @model @auth(rules: [{ allow: public }, { allow: private }]) {
  id: ID!
  gridConfiguration: AWSJSON!
  backgroundImages: [AWSJSON!]!
}

type Label
  @model
  @key(name: "byRoom", fields: ["roomId"])
  @auth(rules: [{ allow: public }, { allow: private }]) {
  id: ID!
  roomId: ID!
  contents: String!
  x: Float!
  y: Float!
}

type Counter
  @model
  @key(name: "byRoom", fields: ["roomId"])
  @auth(rules: [{ allow: public }, { allow: private }]) {
  id: ID!
  roomId: ID!
  title: String!
  value: Int!
  max: Int
  x: Float!
  y: Float!
  type: CounterType!
}

enum CounterType {
  CLOCK
  OTHER
}

type VisualDie
  @model
  @key(name: "byRoom", fields: ["roomId"])
  @auth(rules: [{ allow: public }, { allow: private }]) {
  id: ID!
  roomId: ID!
  room: InteractiveRoom @connection(fields: ["roomId"])
  x: Float!
  y: Float!
  createdBy: String!
  result: Int!
  sides: Int!
  color: String!
  version: Int!
  type: String
}

type RollableTable
  @model
  @auth(rules: [{ allow: public }, { allow: private }]) {
  id: ID!
  title: String!
  columns: [AWSJSON!]!
}

type Subscription {
  onUpdateTextRoomByName(name: String!): TextRoom
    @aws_subscribe(mutations: ["updateTextRoom"])
  onCreateVisualDieByRoom(roomId: String!): VisualDie
    @aws_subscribe(mutations: ["createVisualDie"])
  onUpdateInteractiveRoomById(id: String!): InteractiveRoom
    @aws_subscribe(mutations: ["updateInteractiveRoom"])
  onUpdateVisualDieById(id: String!): VisualDie
    @aws_subscribe(mutations: ["updateVisualDie"])
  onCreateCounterByRoom(roomId: String!): Counter
    @aws_subscribe(mutations: ["createCounter"])
  onUpdateCounterById(id: String!): Counter
    @aws_subscribe(mutations: ["updateCounter"])
  onCreateLabelByRoom(roomId: String!): Label
    @aws_subscribe(mutations: ["createLabel"])
  onUpdateLabelById(id: String!): Label
    @aws_subscribe(mutations: ["updateLabel"])
  onCreateTrophyDarkCharacterByGame(gameID: String!): TrophyDarkCharacter
    @aws_subscribe(mutations: ["createTrophyDarkCharacter"])
  onUpdateTrophyDarkCharacterById(id: String!): TrophyDarkCharacter
    @aws_subscribe(mutations: ["updateTrophyDarkCharacter"])
  onUpdateTrophyDarkRoomById(id: String!): TrophyDarkRoom
    @aws_subscribe(mutations: ["updateTrophyDarkRoom"])
  onCreateTrophyGoldCharacterByGame(gameID: String!): TrophyGoldCharacter
    @aws_subscribe(mutations: ["createTrophyGoldCharacter"])
  onUpdateTrophyGoldRoomById(id: String!): TrophyGoldRoom
    @aws_subscribe(mutations: ["updateTrophyGoldRoom"])
  onUpdateTrophyGoldDiceModuleById(id: String!): TrophyGoldDiceModule
    @aws_subscribe(mutations: ["updateTrophyGoldDiceModule"])
  onUpdateTrophyGoldCharacterById(id: String!): TrophyGoldCharacter
    @aws_subscribe(mutations: ["updateTrophyGoldCharacter"])
  onCreateTrophyGoldBeastByGame(gameID: String!): TrophyGoldBeast
    @aws_subscribe(mutations: ["createTrophyGoldBeast"])
  onUpdateTrophyGoldBeastById(id: String!): TrophyGoldBeast
    @aws_subscribe(mutations: ["updateTrophyGoldBeast"])
  onCreateHeartCharacterByGame(gameID: String!): HeartCharacter
    @aws_subscribe(mutations: ["createHeartCharacter"])
  onUpdateHeartCharacterById(id: String!): HeartCharacter
    @aws_subscribe(mutations: ["updateHeartCharacter"])
  onUpdateSafetyModuleById(id: String!): SafetyModule
    @aws_subscribe(mutations: ["updateSafetyModule"])
  onUpdateHexMapModuleById(id: String!): HexMapModule
    @aws_subscribe(mutations: ["updateHexMapModule"])
}
